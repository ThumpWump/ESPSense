
#Configuration for BN-Link BNC-60/U133TJ

substitutions:
  plug_name: bnlink_01
  # Higher value gives lower watt readout
  current_res: "0.00245" # started at 0.00221
  # Lower value gives lower voltage readout
  voltage_div: "883" # started at 940

esphome:
  name: ${plug_name}
  platform: ESP8266
  board: esp01_1m
  includes:
    - espsense.h
  # Uses the ESPAsyncUDP library
  libraries:
    - "ESPAsyncUDP"
    - "ArduinoJson-esphomelib@5.13.3"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  fast_connect: on

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${plug_name} Fallback Hotspot"
    password: !secret ap_pass

ota:
  safe_mode: True
  password: !secret ota_pass

captive_portal:

# Enable logging
logger:
  level: DEBUG
  baud_rate: 0 # Disable UART logging, we have no physical connections!

# Enable Home Assistant API
api:

time:
  - platform: homeassistant
    id: homeassistant_time
    
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO3
      inverted: True # VERIFY
    name: "${plug_name}_button"
    on_press:
      then:
        - switch.toggle: "${plug_name}_Relay"
        - switch.toggle: "${plug_name}_LED_Blue"

switch:
  - platform: gpio
    name: "${plug_name}_Relay"
    id: "${plug_name}_Relay"
    pin: GPIO14
    restore_mode: ALWAYS_ON
  - platform: gpio
    name: "${plug_name}_LED_Blue"
    id: "${plug_name}_LED_Blue"
    pin: GPIO13 # VERIFY
    inverted: True
    restore_mode: ALWAYS_ON
  # - platform: gpio
  #   name: "${plug_name}_ESP_LED"
  #   pin: GPIO4
  #   inverted: True
  #   restore_mode: ALWAYS_ON
  - platform: gpio
    name: "${plug_name}_LED_Red"
    pin: GPIO1
    inverted: True
    restore_mode: ALWAYS_OFF

sensor:
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO04
    cf1_pin: GPIO5
    current_resistor: ${current_res}
    voltage_divider: ${voltage_div}
    current:
      name: "${plug_name}_Amperage"
      unit_of_measurement: A
    voltage:
      name: "${plug_name}_Voltage"
      unit_of_measurement: V
    power:
      name: "${plug_name}_Wattage"
      unit_of_measurement: W
      id: "${plug_name}_Wattage"
    change_mode_every: 8
    update_interval: 3s
  - platform: total_daily_energy
    name: "${plug_name}_Total Daily Energy"
    power_id: "${plug_name}_Wattage"
    filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
    unit_of_measurement: kWh

# Extra sensor to keep track of plug uptime
  - platform: uptime
    name: ${plug_name}_Uptime Sensor
    
custom_component:
- lambda: |-
    auto sensor_power = new ESPSense(id(${plug_name}_Wattage), 120);
    return {sensor_power};